# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: GraphDeploy
on:
  workflow_dispatch: {}
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      CI: "true"
      STAGE: graphDemo
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set git identity
        run: |-
          git config user.name "Automation"
          git config user.email "github-actions@github.com"
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Anti-tamper check
        run: git diff --exit-code
      - name: Build
        run: npx projen build
      - name: Anti-tamper check
        run: git diff --exit-code
      - name: Upload artifact
        uses: actions/upload-artifact@v2.1.1
        with:
          name: graphDemo-build
          path: cdk.out
  CDKDay_Datastore-graphDemo:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: graphDemo
    concurrency:
      group: CDKDay_Datastore-graphDemo
      cancel-in-progress: false
    env:
      STAGE: graphDemo
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: graphDemo-build
          path: cdk.out
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          role-duration-seconds: 1200
      - name: Deploy CDKDay-Datastore-graphDemo
        run: npx cdk deploy --exclusively CDKDay-Datastore-graphDemo --app cdk.out --require-approval never
        timeout-minutes: 20
  CDKDay_Secrets-graphDemo:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: graphDemo
    concurrency:
      group: CDKDay_Secrets-graphDemo
      cancel-in-progress: false
    env:
      STAGE: graphDemo
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: graphDemo-build
          path: cdk.out
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          role-duration-seconds: 1200
      - name: Deploy CDKDay-Secrets-graphDemo
        run: npx cdk deploy --exclusively CDKDay-Secrets-graphDemo --app cdk.out --require-approval never
        timeout-minutes: 20
  CDKDay_Ingestion-graphDemo:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: graphDemo
    concurrency:
      group: CDKDay_Ingestion-graphDemo
      cancel-in-progress: false
    env:
      STAGE: graphDemo
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: graphDemo-build
          path: cdk.out
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          role-duration-seconds: 1200
      - name: Deploy CDKDay-Ingestion-graphDemo
        run: npx cdk deploy --exclusively CDKDay-Ingestion-graphDemo --app cdk.out --require-approval never
        timeout-minutes: 20
  CDKDay_Api-graphDemo:
    needs:
      - build
      - CDKDay_Datastore-graphDemo
      - CDKDay_Secrets-graphDemo
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: graphDemo
    concurrency:
      group: CDKDay_Api-graphDemo
      cancel-in-progress: false
    env:
      STAGE: graphDemo
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: graphDemo-build
          path: cdk.out
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          role-duration-seconds: 1200
      - name: Deploy CDKDay-Api-graphDemo
        run: npx cdk deploy --exclusively CDKDay-Api-graphDemo --app cdk.out --require-approval never
        timeout-minutes: 20
  CDKDay_AsyncJobs-graphDemo:
    needs:
      - build
      - CDKDay_Datastore-graphDemo
      - CDKDay_Secrets-graphDemo
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: graphDemo
    concurrency:
      group: CDKDay_AsyncJobs-graphDemo
      cancel-in-progress: false
    env:
      STAGE: graphDemo
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: graphDemo-build
          path: cdk.out
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          role-duration-seconds: 1200
      - name: Deploy CDKDay-AsyncJobs-graphDemo
        run: npx cdk deploy --exclusively CDKDay-AsyncJobs-graphDemo --app cdk.out --require-approval never
        timeout-minutes: 20
  CDKDay_Webhooks-graphDemo:
    needs:
      - build
      - CDKDay_Secrets-graphDemo
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: graphDemo
    concurrency:
      group: CDKDay_Webhooks-graphDemo
      cancel-in-progress: false
    env:
      STAGE: graphDemo
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: graphDemo-build
          path: cdk.out
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          role-duration-seconds: 1200
      - name: Deploy CDKDay-Webhooks-graphDemo
        run: npx cdk deploy --exclusively CDKDay-Webhooks-graphDemo --app cdk.out --require-approval never
        timeout-minutes: 20
  CDKDay_Dashboard-graphDemo:
    needs:
      - build
      - CDKDay_Api-graphDemo
      - CDKDay_AsyncJobs-graphDemo
      - CDKDay_Webhooks-graphDemo
      - CDKDay_Datastore-graphDemo
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: graphDemo
    concurrency:
      group: CDKDay_Dashboard-graphDemo
      cancel-in-progress: false
    env:
      STAGE: graphDemo
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: graphDemo-build
          path: cdk.out
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          role-duration-seconds: 1200
      - name: Deploy CDKDay-Dashboard-graphDemo
        run: npx cdk deploy --exclusively CDKDay-Dashboard-graphDemo --app cdk.out --require-approval never
        timeout-minutes: 20
  build_prod:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    environment: graphProd
    concurrency:
      group: build_prod
      cancel-in-progress: false
    env:
      STAGE: graphProd
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Synth
        run: npx projen synth
      - name: Upload artifact
        uses: actions/upload-artifact@v2.1.1
        with:
          name: graphProd-build
          path: cdk.out
  CDKDay_Datastore-graphProd:
    needs:
      - build_prod
      - CDKDay_Datastore-graphDemo
      - CDKDay_Secrets-graphDemo
      - CDKDay_Ingestion-graphDemo
      - CDKDay_Api-graphDemo
      - CDKDay_AsyncJobs-graphDemo
      - CDKDay_Webhooks-graphDemo
      - CDKDay_Dashboard-graphDemo
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: graphProd
    concurrency:
      group: CDKDay_Datastore-graphProd
      cancel-in-progress: false
    env:
      STAGE: graphProd
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: graphProd-build
          path: cdk.out
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          role-duration-seconds: 1200
      - name: Deploy CDKDay-Datastore-graphProd
        run: npx cdk deploy --exclusively CDKDay-Datastore-graphProd --app cdk.out --require-approval never
        timeout-minutes: 20
  CDKDay_Secrets-graphProd:
    needs:
      - build_prod
      - CDKDay_Datastore-graphDemo
      - CDKDay_Secrets-graphDemo
      - CDKDay_Ingestion-graphDemo
      - CDKDay_Api-graphDemo
      - CDKDay_AsyncJobs-graphDemo
      - CDKDay_Webhooks-graphDemo
      - CDKDay_Dashboard-graphDemo
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: graphProd
    concurrency:
      group: CDKDay_Secrets-graphProd
      cancel-in-progress: false
    env:
      STAGE: graphProd
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: graphProd-build
          path: cdk.out
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          role-duration-seconds: 1200
      - name: Deploy CDKDay-Secrets-graphProd
        run: npx cdk deploy --exclusively CDKDay-Secrets-graphProd --app cdk.out --require-approval never
        timeout-minutes: 20
  CDKDay_Ingestion-graphProd:
    needs:
      - build_prod
      - CDKDay_Datastore-graphDemo
      - CDKDay_Secrets-graphDemo
      - CDKDay_Ingestion-graphDemo
      - CDKDay_Api-graphDemo
      - CDKDay_AsyncJobs-graphDemo
      - CDKDay_Webhooks-graphDemo
      - CDKDay_Dashboard-graphDemo
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: graphProd
    concurrency:
      group: CDKDay_Ingestion-graphProd
      cancel-in-progress: false
    env:
      STAGE: graphProd
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: graphProd-build
          path: cdk.out
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          role-duration-seconds: 1200
      - name: Deploy CDKDay-Ingestion-graphProd
        run: npx cdk deploy --exclusively CDKDay-Ingestion-graphProd --app cdk.out --require-approval never
        timeout-minutes: 20
  CDKDay_Api-graphProd:
    needs:
      - build_prod
      - CDKDay_Datastore-graphProd
      - CDKDay_Secrets-graphProd
      - CDKDay_Datastore-graphDemo
      - CDKDay_Secrets-graphDemo
      - CDKDay_Ingestion-graphDemo
      - CDKDay_Api-graphDemo
      - CDKDay_AsyncJobs-graphDemo
      - CDKDay_Webhooks-graphDemo
      - CDKDay_Dashboard-graphDemo
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: graphProd
    concurrency:
      group: CDKDay_Api-graphProd
      cancel-in-progress: false
    env:
      STAGE: graphProd
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: graphProd-build
          path: cdk.out
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          role-duration-seconds: 1200
      - name: Deploy CDKDay-Api-graphProd
        run: npx cdk deploy --exclusively CDKDay-Api-graphProd --app cdk.out --require-approval never
        timeout-minutes: 20
  CDKDay_AsyncJobs-graphProd:
    needs:
      - build_prod
      - CDKDay_Datastore-graphProd
      - CDKDay_Secrets-graphProd
      - CDKDay_Datastore-graphDemo
      - CDKDay_Secrets-graphDemo
      - CDKDay_Ingestion-graphDemo
      - CDKDay_Api-graphDemo
      - CDKDay_AsyncJobs-graphDemo
      - CDKDay_Webhooks-graphDemo
      - CDKDay_Dashboard-graphDemo
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: graphProd
    concurrency:
      group: CDKDay_AsyncJobs-graphProd
      cancel-in-progress: false
    env:
      STAGE: graphProd
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: graphProd-build
          path: cdk.out
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          role-duration-seconds: 1200
      - name: Deploy CDKDay-AsyncJobs-graphProd
        run: npx cdk deploy --exclusively CDKDay-AsyncJobs-graphProd --app cdk.out --require-approval never
        timeout-minutes: 20
  CDKDay_Webhooks-graphProd:
    needs:
      - build_prod
      - CDKDay_Secrets-graphProd
      - CDKDay_Datastore-graphDemo
      - CDKDay_Secrets-graphDemo
      - CDKDay_Ingestion-graphDemo
      - CDKDay_Api-graphDemo
      - CDKDay_AsyncJobs-graphDemo
      - CDKDay_Webhooks-graphDemo
      - CDKDay_Dashboard-graphDemo
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: graphProd
    concurrency:
      group: CDKDay_Webhooks-graphProd
      cancel-in-progress: false
    env:
      STAGE: graphProd
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: graphProd-build
          path: cdk.out
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          role-duration-seconds: 1200
      - name: Deploy CDKDay-Webhooks-graphProd
        run: npx cdk deploy --exclusively CDKDay-Webhooks-graphProd --app cdk.out --require-approval never
        timeout-minutes: 20
  CDKDay_Dashboard-graphProd:
    needs:
      - build_prod
      - CDKDay_Api-graphProd
      - CDKDay_AsyncJobs-graphProd
      - CDKDay_Webhooks-graphProd
      - CDKDay_Datastore-graphProd
      - CDKDay_Datastore-graphDemo
      - CDKDay_Secrets-graphDemo
      - CDKDay_Ingestion-graphDemo
      - CDKDay_Api-graphDemo
      - CDKDay_AsyncJobs-graphDemo
      - CDKDay_Webhooks-graphDemo
      - CDKDay_Dashboard-graphDemo
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: graphProd
    concurrency:
      group: CDKDay_Dashboard-graphProd
      cancel-in-progress: false
    env:
      STAGE: graphProd
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: graphProd-build
          path: cdk.out
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          role-duration-seconds: 1200
      - name: Deploy CDKDay-Dashboard-graphProd
        run: npx cdk deploy --exclusively CDKDay-Dashboard-graphProd --app cdk.out --require-approval never
        timeout-minutes: 20
